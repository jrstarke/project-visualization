<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" titleStyleName="datesStatusStyle" statusStyleName="datesStatusStyle" creationComplete="initParentProject()" verticalGap="0" borderThicknessBottom="5" borderThicknessLeft="5" borderThicknessRight="5">
	<mx:Style>
        .datesStatusStyle {
            fontWeight: bold;
            color: white;
        }
        
        .eventDateStyle{
        	fontWeight: bold;
        }
        
        .eventCommentStyle{
        	
        }
        
        .eventSelectedStyle{
        	color: red;
        }
    </mx:Style>
    <mx:Label id="sizeLabel"/>
 	
	<mx:Script>
		<![CDATA[
			import mx.containers.VBox;
			import mx.controls.List;
			import mx.effects.Move;
			import mx.events.MoveEvent;
			import mx.containers.HBox;
			import mx.collections.ArrayCollection;
			import mx.controls.Label;
			
			//create a list of the current events in the main list
			public var eventList:ArrayCollection = new ArrayCollection();
			
			private var maxEventListMax:int = 41;
			private var maxEventListSize:int = 0;
			public var maxEventListCount:int = 0;;
			
			private var getParentProject:ProjectVisualizaton = new ProjectVisualizaton();
			
			//determine how many events to be displayed on the main list
			private function initMaxEventListSize():void
			{				
				var files:Array = eventList[0].files;
					
				if(files.length <= 3)
					maxEventListCount = maxEventListCount + files.length + 2;
				else
					maxEventListCount = maxEventListCount + 6;
			}
			
			//function to gain easy access to the parent class
			private function initParentProject():void
			{
				getParentProject =  this.parent.parent.parent.parent as ProjectVisualizaton;	
			}
			
			//add event to the list and display on the main list
			public function addEventToList(event:Object):void
			{				
				eventList.addItemAt(event, 0);
			
				initMaxEventListSize();	
				//get list of authors to add
				//getParentProject.authorInfoList.addAuthorToList(event);
				
				var eventHBox:HBox = new HBox();
				var eventVBox:VBox = new VBox();
				var eventInnerHBox:HBox = new HBox();
				var eventDateLabel:Label = new Label();
				var eventTypeLabel:Label = new Label();
				var eventAuthorLabel:Label = new Label();
				var eventCommentLabel:Label = new Label();
				var eventModuleLabel:Label = new Label();
				var eventSpace:Label = new Label();
				
				/* eventHBox.setStyle("paddingTop",1);
				eventHBox.setStyle("paddingBottom",1);
				eventHBox.setStyle("paddingLeft",1);
				eventHBox.setStyle("paddingRight",1); */
				eventVBox.setStyle("verticalGap", 0);
				eventHBox.name = event.pk + "event";
				eventVBox.name = event.author;
				eventInnerHBox.name = event.pk + "eventInnerHBox";
				eventDateLabel.name = event.pk + "date";
				eventTypeLabel.name = event.pk + event.type;
				eventAuthorLabel.name = event.author;
				eventCommentLabel.name = event.pk + "comment";
				eventModuleLabel.name = event.modules;
					
				//eventDateLabel.width = 75;
				eventTypeLabel.width = 0;
				eventTypeLabel.height = 0;
				eventModuleLabel.height = 0;
				eventAuthorLabel.width = 75;
				eventCommentLabel.width = 875;
				
				//eventTypeLabel.text = event.type;
				eventAuthorLabel.text = event.author_short_name;
				eventDateLabel.text = event.date;
				
				//Check if comment exists
				if(event.comment != null && event.comment != ""){
					var s:String = event.comment;
					s = s.replace("\n", "");
					//s = s.substring(0, 55);
					eventCommentLabel.text = s;
					eventHBox.toolTip = "Author: " + event.author_name + "\nComment: " + event.comment;
					eventTypeLabel.toolTip = eventHBox.toolTip;
					eventAuthorLabel.toolTip = eventHBox.toolTip;
					eventCommentLabel.toolTip = eventHBox.toolTip;
				}
				else{
					eventCommentLabel.text = "--No comment available--";
					eventHBox.toolTip = "Author: " + event.author_name;
					eventTypeLabel.toolTip = eventHBox.toolTip;
					eventAuthorLabel.toolTip = eventHBox.toolTip;
					eventCommentLabel.toolTip = eventHBox.toolTip;
				}
					
				eventDateLabel.styleName = "eventDateStyle";
				eventAuthorLabel.styleName = "eventDateStyle";
				
				eventHBox.addEventListener(MouseEvent.MOUSE_OVER, eventMouseOver);
				
				eventHBox.addChild(eventVBox);
				eventVBox.addChild(eventInnerHBox);
				eventInnerHBox.addChild(eventDateLabel);
				eventInnerHBox.addChild(eventTypeLabel);
				eventInnerHBox.addChild(eventAuthorLabel);
				eventVBox.addChild(eventCommentLabel);
				eventVBox.addChild(eventModuleLabel);
				this.addChildAt(eventHBox, 0);
				
				//add files to each event
				var i:int;
				var files:Array = event.files;
				var status:Array = event.status;
				for(i=0; i<3; i++)
				{
					if(i < files.length){
						var eventFile:Label = new Label();
						eventFile.text = files[i];
						
						if(status[i] == "M")
							eventFile.setStyle("color", 0x3dbaba);
						if(status[i] == "A")
							eventFile.setStyle("color", 0x43ba3d);
						if(status[i] == "R")
							eventFile.setStyle("color", 0xeadc15);
						if(status[i] == "D")
							eventFile.setStyle("color", 0xba3d3d);
						
						eventVBox.addChild(eventFile);
					}
				}
				
				//add '...' if more than 3 files in an event
				if(files.length > 3)
				{
					var eventFileLarge:Label = new Label();
					eventFileLarge.text = "...";
					eventFileLarge.toolTip = files.toString();
					eventVBox.addChild(eventFileLarge);
				}
				
				//eventVBox.addChild(eventSpace);
				
				//remove event from list if it is full
				while(maxEventListCount > maxEventListMax){					
					var eventFiles:Array = eventList[eventList.length-1].files;
					
					if(eventFiles.length <= 3)
						maxEventListCount = maxEventListCount - eventFiles.length - 2;
					else
						maxEventListCount = maxEventListCount - 6;
					
					removeEventFromList();
				}
			}
		
			//remove event from the list and remove display from the main list
			public function removeEventFromList():void
			{	
				var removedEvent:HBox = new HBox();
				removedEvent = this.getChildByName(eventList[eventList.length-1].pk + "event") as HBox;
				this.removeChild(removedEvent);
				//getParentProject.authorInfoList.removeAuthorFromList(eventList[maxEventListSize]);
				eventList.removeItemAt(eventList.length-1);
			}
			
			//remove all events from the list and remove displays from the main list
			public function removeAllEventsFromList():void
			{	
				this.removeAllChildren();
				eventList.removeAll();
			}
			
			//perform mouse over effects, pause playback
			private function eventMouseOver(e:MouseEvent):void
			{
				getParentProject.controllerCanvas.eventTimer.stop();
				
				var currentHBox:HBox = new HBox();
				currentHBox = e.currentTarget as HBox;
				
				currentHBox.addEventListener(MouseEvent.MOUSE_OUT, eventMouseOut);

				//currentHBox.setStyle("borderStyle", "solid");
				currentHBox.opaqueBackground = 0xeaeaea;	

				/* currentHBox.setStyle("paddingTop",0);
				currentHBox.setStyle("paddingBottom",0);
				currentHBox.setStyle("paddingLeft",0);
				currentHBox.setStyle("paddingRight",0); */
				
				//highlight associated author if possible
				var i:int;
				for(i=0; i<getParentProject.authorInfoList.authorList.length; i++)
				{
					var author:VBox = currentHBox.getChildAt(0) as VBox;
					if(author.name == getParentProject.authorInfoList.authorList[i].author)
					{
						var authorHBox:HBox = new HBox();
						authorHBox = getParentProject.authorInfoList.getChildByName(getParentProject.authorInfoList.authorList[i].author) as HBox;
						//authorHBox.setStyle("borderStyle", "solid");
						if(authorHBox.opaqueBackground != 0x4d4f4f) 
							authorHBox.opaqueBackground = 0xeaeaea;	
						
						/* authorHBox.setStyle("paddingTop",0);
						authorHBox.setStyle("paddingBottom",0);
						authorHBox.setStyle("paddingLeft",0);
						authorHBox.setStyle("paddingRight",0);	 */					
					}
				} 
				
				//highlight associated modules if possible
				var currentVBox:VBox = currentHBox.getChildAt(0) as VBox;
				var module:Label = currentVBox.getChildAt(2) as Label;
				var moduleList:Array = new Array();
				moduleList = module.name.split(",");

				for(i=0; i<moduleList.length; i++)
				{
					var j:int;
					for(j=0; j<getParentProject.modulesList.moduleList.length; j++)
					{
						if(moduleList[i] == getParentProject.modulesList.moduleList[j].pk){
							var moduleHBox:HBox = new HBox();
							moduleHBox = getParentProject.modulesList.getChildByName(getParentProject.modulesList.moduleList[j].pk) as HBox;
						
							//moduleHBox.setStyle("borderStyle", "solid");
							if(moduleHBox.opaqueBackground != 0x4d4f4f) 
								moduleHBox.opaqueBackground = 0xeaeaea;	
						
							/* moduleHBox.setStyle("paddingTop",0);
							moduleHBox.setStyle("paddingBottom",0);
							moduleHBox.setStyle("paddingLeft",0);
							moduleHBox.setStyle("paddingRight",0); */
						}	
					}						
				}
			}
			
			//perform mouse out effects, resume playback
			private function eventMouseOut(e:MouseEvent):void
			{
				//check if the player is playing
				//removed for demo!
				//if(getParentProject.controllerCanvas.playerButton.source == "assets/images/button-icon-pause.png")
					getParentProject.controllerCanvas.eventTimer.start();
				
				var currentHBox:HBox = new HBox();
				currentHBox = e.currentTarget as HBox;
				//currentHBox.setStyle("borderStyle", "none");
				currentHBox.opaqueBackground = 0xffffff;	
				
				/* currentHBox.setStyle("paddingTop",1);
				currentHBox.setStyle("paddingBottom",1);
				currentHBox.setStyle("paddingLeft",1);
				currentHBox.setStyle("paddingRight",1); */
				
				currentHBox.removeEventListener(MouseEvent.MOUSE_OUT, eventMouseOut);
				
				//unhighlight all authors from the authors list
				var i:int;
				for(i=0; i<getParentProject.authorInfoList.authorList.length; i++)
				{
					var authorHBox:HBox = new HBox();
					authorHBox = getParentProject.authorInfoList.getChildByName(getParentProject.authorInfoList.authorList[i].author) as HBox;
					//authorHBox.setStyle("borderStyle", "none");
					if(authorHBox.opaqueBackground != 0x4d4f4f) 
						authorHBox.opaqueBackground = 0xffffff;			
					
					/* authorHBox.setStyle("paddingTop",1);
					authorHBox.setStyle("paddingBottom",1);
					authorHBox.setStyle("paddingLeft",1);	
					authorHBox.setStyle("paddingRight",1);	 */			
				} 
				
				//unhighlight all modules from the modules list
				for(i=0; i<getParentProject.modulesList.moduleList.length; i++)
				{
					var moduleHBox:HBox = new HBox();
					moduleHBox = getParentProject.modulesList.getChildByName(getParentProject.modulesList.moduleList[i].pk) as HBox;
					//moduleHBox.setStyle("borderStyle", "none");
					if(moduleHBox.opaqueBackground != 0x4d4f4f) 
						moduleHBox.opaqueBackground = 0xffffff;		
					
					/* moduleHBox.setStyle("paddingTop",1);
					moduleHBox.setStyle("paddingBottom",1);
					moduleHBox.setStyle("paddingLeft",1);
					moduleHBox.setStyle("paddingRight",1); */	
				}
			}
		]]>
	</mx:Script>
</mx:Panel> 