<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" title="Modules" titleStyleName="modulesStatusStyle" verticalGap="0" creationComplete="init()">
	<mx:Style>
    	.modulesStatusStyle {
        	fontWeight: bold;
            color: white;
     	}
     	
     	.moduleLabelStyle	{
        	color: #c3c4c4;
        }
        
        .moduleLabelStyleHighlight	{
        	color: white;
        }
     </mx:Style>
     
     <mx:Script>
     	<![CDATA[
     		import mx.rpc.events.ResultEvent;
     		import mx.rpc.http.HTTPService;
     		import com.adobe.serialization.json.JSON;
     		import mx.containers.HBox;
			import mx.controls.Label;
     		
     		public var highlightedModule:int = 0;
			private var getParentProject:ProjectVisualizaton = new ProjectVisualizaton();
			private var getSrvModules:HTTPService;
			private var getSrvModuleStats:HTTPService;
			public var moduleList:Array = new Array();
			
			//function to gain easy access to the parent class
			private function init():void
			{
				getParentProject =  this.parent.parent.parent.parent as ProjectVisualizaton;	
				
				getSrvModules = new HTTPService();
				getSrvModules.url = "http://localhost:8000/modules/"; 
				getSrvModules.resultFormat = "text";
				getSrvModules.addEventListener("result", processModuleList);
				
				getSrvModules.send();
			}
			
			private function processModuleList(event:ResultEvent):void{
				var decoded:Object = JSON.decode(event.result.toString());
				moduleList = decoded as Array;
				moduleList = moduleList.reverse();
				
				var i:int;
				for(i=0; i<moduleList.length; i++){
					var moduleHBox:HBox = new HBox();
					var moduleNameLabel:Label = new Label();
			
					moduleHBox.name = moduleList[i].pk + "";
				
					moduleNameLabel.name = moduleList[i].pk + "Label";					
					moduleNameLabel.text = "" + moduleList[i].name
					
					//moduleNameLabel.width = 190;
					
					moduleHBox.setStyle("border", "none");
					moduleNameLabel.styleName = "moduleLabelStyle";
						
					moduleHBox.setStyle("paddingTop",1);
					moduleHBox.setStyle("paddingBottom",1);
					moduleHBox.setStyle("paddingLeft",1);	
					moduleHBox.setStyle("paddingRight",1);	
					
					moduleHBox.addEventListener(MouseEvent.MOUSE_OVER, eventMouseOver);
					moduleHBox.addEventListener(MouseEvent.CLICK, eventMouseClick);
					
					moduleHBox.addChild(moduleNameLabel);
					this.addChildAt(moduleHBox, 0);;
				}
			}
			
			//perform click to hightlight the module name and set the filter
			private function eventMouseClick(e:MouseEvent):void
			{			
				var currentHBox:HBox = new HBox();
				currentHBox = e.currentTarget as HBox;
				var currentLabel:Label = new Label();
				currentLabel = currentHBox.getChildAt(0) as Label;
				var tempStyleName:String = currentLabel.styleName.toString();
					
				//reset all selected modules
				var i:int;
				for(i=0; i<moduleList.length; i++)
				{
					var tempHBox:HBox = new HBox();
					tempHBox = getParentProject.modulesList.getChildByName(moduleList[i].pk) as HBox;
					
					var tempLabel:Label = new Label();
					tempLabel = tempHBox.getChildAt(0) as Label;
					tempHBox.opaqueBackground = 0xffffff;
					tempLabel.styleName = "authorLabelStyle";
				}
				
				//check to see if we must deselect a module
				if(tempStyleName != "moduleLabelStyleHighlight"){
					currentHBox.opaqueBackground = 0xc3c4c4;
					currentLabel.styleName = "moduleLabelStyleHighlight";
					
					highlightedModule = int(currentHBox.name);
					
					getSrvModuleStats = new HTTPService();
					getSrvModuleStats.url = "http://localhost:8000/selectedstats/" + getParentProject.authorInfoList.highlightedAuthor + "/" + highlightedModule + "/"; 
					getSrvModuleStats.resultFormat = "text";
					getSrvModuleStats.addEventListener("result", processModuleStats);
					getSrvModuleStats.send();
				}
				
				else
				{
					currentHBox.opaqueBackground = 0xffffff;
					currentLabel.styleName = "moduleLabelStyle";
					highlightedModule = 0;
					
					getSrvModuleStats = new HTTPService();
					getSrvModuleStats.url = "http://localhost:8000/selectedstats/" + getParentProject.authorInfoList.highlightedAuthor + "/" + highlightedModule + "/"; 
					getSrvModuleStats.resultFormat = "text";
					getSrvModuleStats.addEventListener("result", processModuleStats);
					getSrvModuleStats.send();
				}
			}
			
			private function processModuleStats(event:ResultEvent):void
			{
				getParentProject.controllerCanvas.processGetResult(getSrvModuleStats.lastResult.toString());
			}
			
			//perform mouse over effects, pause playback
			private function eventMouseOver(e:MouseEvent):void
			{
				getParentProject.controllerCanvas.eventTimer.stop();
				
				var currentHBox:HBox = new HBox();
				currentHBox = e.currentTarget as HBox;
				
				currentHBox.addEventListener(MouseEvent.MOUSE_OUT, eventMouseOut);

				currentHBox.setStyle("borderStyle", "solid");
				
				currentHBox.setStyle("paddingTop",0);
				currentHBox.setStyle("paddingBottom",0);
				currentHBox.setStyle("paddingLeft",0);
				currentHBox.setStyle("paddingRight",0);
				
				//highlight associated event if possible
				/*var i:int;
				for(i=0; i<getParentProject.eventInfoList.eventList.length; i++)
				{
					if(currentHBox.name == getParentProject.eventInfoList.eventList[i].author)
					{
						var eventHBox:HBox = new HBox();
						eventHBox = getParentProject.eventInfoList.getChildByName(getParentProject.eventInfoList.eventList[i].pk + "event") as HBox;
						eventHBox.setStyle("borderStyle", "solid");	
						
						eventHBox.setStyle("paddingTop",0);
						eventHBox.setStyle("paddingBottom",0);
						eventHBox.setStyle("paddingLeft",0);					
					}
				} */
			}

			//perform mouse out effects, resume playback
			private function eventMouseOut(e:MouseEvent):void
			{
				//check if the player is playing
				if(getParentProject.controllerCanvas.playerButton.source == "assets/images/button-icon-pause.png")
					getParentProject.controllerCanvas.eventTimer.start();
				
				var currentHBox:HBox = new HBox();
				currentHBox = e.currentTarget as HBox;
				currentHBox.setStyle("borderStyle", "none");
				
				currentHBox.setStyle("paddingTop",1);
				currentHBox.setStyle("paddingBottom",1);
				currentHBox.setStyle("paddingLeft",1);
				currentHBox.setStyle("paddingRight",1);
				
				currentHBox.removeEventListener(MouseEvent.MOUSE_OUT, eventMouseOut);
				
				//unhighlight all events from the event list
				/*var i:int;
				for(i=0; i<getParentProject.eventInfoList.eventList.length; i++)
				{
					var eventHBox:HBox = new HBox();
					eventHBox = getParentProject.eventInfoList.getChildByName(getParentProject.eventInfoList.eventList[i].pk + "event") as HBox;
					eventHBox.setStyle("borderStyle", "none");	
					
					eventHBox.setStyle("paddingTop",1);
					eventHBox.setStyle("paddingBottom",1);
					eventHBox.setStyle("paddingLeft",1);					
				} */
			}
			
     	]]>
     </mx:Script>
</mx:Panel>
