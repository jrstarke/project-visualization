<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" height="13%" width="1280" horizontalCenter="0" creationComplete="getSrvStats.send()">

    <mx:ArrayCollection id="resultsDjango"/>
    <mx:ArrayCollection id="parsedResultsDjango"/>
    <mx:ArrayCollection id="eventList"/>
    <mx:HTTPService id="getSrvStats" url="http://localhost:8000/stats/" resultFormat="text" result="handleGetResult();initDates();initMonthLabels();"/>
    
    <mx:Script>
        <![CDATA[
        	import mx.messaging.channels.StreamingAMFChannel;

        import mx.collections.ArrayCollection;
    	import com.adobe.serialization.json.JSON;
    	
    	//decode JSON format from the http request
    	private function handleGetResult():void
    	{
    		getParentProject =  this.parent.parent.parent as ProjectVisualizaton;
    		
    		//added to remove playback (FOR DEMO)
    		this.removeChild(this.getChildByName("playerButton"));
			
			processGetResult(getSrvStats.lastResult.toString());
   		}
   		
   		public function processGetResult(srvStats:String):void
   		{
   			var decoded:Object = JSON.decode(srvStats);
    		resultsDjango = new ArrayCollection(decoded as Array);
    		parsedResultsDjango.removeAll();
    		
    		var i:int;
    		for(i=0; i<resultsDjango.length; i++)
    		{
    			parsedResultsDjango.addItem({dateEvent: resultsDjango[i][0], normalizedEvents: resultsDjango[i][1]});
    		}   			
   		}
        ]]>
    </mx:Script>
   	<mx:SolidColor id="sc1" color="red" alpha=".3"/>
    <mx:Stroke id = "s1" color="red" weight="2"/>
    <mx:SolidColor id="sc2" color="blue" alpha=".3"/>
    <mx:Stroke id = "s2" color="blue" weight="2"/>
    <mx:SolidColor id="sc3" color="green" alpha=".3"/>
    <mx:Stroke id = "s3" color="green" weight="2"/>
    <mx:Glow id="playGlow" duration="2000" strength="255" color="0xFFFFFF" inner="true"/>
    <mx:Array id="bge"/>
    
	<mx:AreaChart id="Areachart" paddingLeft="10" left="0" height="90%" width="99%" top="0"
         showDataTips="true" dataProvider="{parsedResultsDjango}" backgroundElements="{bge}">
 		<mx:horizontalAxis>
           	 <mx:CategoryAxis id="ha" categoryField="dateEvent"/>
       	 </mx:horizontalAxis>

			<mx:verticalAxis>
				<mx:LinearAxis id="va"/>
			</mx:verticalAxis>
		
			<mx:horizontalAxisRenderers>
				<mx:AxisRenderer axis="{ha}" showLine="false" showLabels="false" tickLength="5" tickPlacement="none"/>
			</mx:horizontalAxisRenderers>
		
			<mx:verticalAxisRenderers>
				<mx:AxisRenderer axis="{va}" showLine="false" showLabels="false" tickLength="5" tickPlacement="none" />
			</mx:verticalAxisRenderers>
		
      	  <mx:series>
        	    <mx:AreaSeries yField="normalizedEvents" form="curve" displayName="Total Events for Date" areaStroke="{s3}" areaFill="{sc3}"/>
        	    <mx:AreaSeries yField="normalizedModule" form="curve" displayName="Total Events for Module" areaStroke="{s2}" areaFill="{sc2}"/>
        	    <mx:AreaSeries yField="normalizedAuthor" form="curve" displayName="Total Events for Author" areaStroke="{s1}" areaFill="{sc1}"/>
      	  </mx:series>
   	 </mx:AreaChart> 
	<mx:Canvas left="0" width="0%" height="90%" top="0" backgroundAlpha="0.5" backgroundColor="#5A5A5A" id="leftCanvas">
	</mx:Canvas>
	<mx:Canvas right="0" width="0.6%" height="90%" top="0" backgroundAlpha="0.5" backgroundColor="#5A5A5A" id="rightCanvas">
	</mx:Canvas>
	<mx:Canvas width="0.5%" height="90%" top="0" backgroundAlpha="0.8" backgroundColor="#A8FF00" id="leftControlCanvas" useHandCursor="true" buttonMode="true" showEffect="{playGlow}">
	</mx:Canvas>
	<mx:Canvas width="0.5%" height="90%" top="0" backgroundAlpha="0.8" backgroundColor="#FF5A00" id="rightControlCanvas" useHandCursor="true" buttonMode="true" showEffect="{playGlow}">
	</mx:Canvas>
	<mx:Image source="assets/images/button-icon-play.png" width="3%" height="30%" verticalCenter="0" id="playerButton" useHandCursor="true" buttonMode="true"/>
	<mx:Label x="100" bottom="30" text="" id="debugLabel"/>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.ProgressBar;
			import mx.containers.Panel;
			import com.adobe.utils.DictionaryUtil;
			import mx.rpc.events.ResultEvent;
			import mx.controls.List;
			import mx.effects.easing.Linear;
			import mx.containers.HBox;
			import mx.containers.VBox;
			
			private var getSrvEvents:HTTPService;
			public var eventIndex:int = 0;
			private var eventDictionaryGlob:Array;
			private var globIndex:int = 0;
			
			//create new timer to step through each event for the specified date
			public var eventTimer:Timer = new Timer(500, 0);
			
			private var getParentProject:ProjectVisualizaton = new ProjectVisualizaton();
			
			//initialize month labels for the controller container
			private function initMonthLabels():void
			{
				//space: offset to match up pixels
				var space:int = 6;
				
				//loop through all dates to find which dates need labels
				var i:int;
				for(i=0; i<parsedResultsDjango.length; i++)
				{
					var curDate:String = "" + parsedResultsDjango.getItemAt(i).dateEvent;
					if(curDate.substring(5, 10) == "01-01")
					{
						var janLabel:Label = new Label();
						janLabel.setStyle("color", 0xffffff);
						janLabel.x = ((Areachart.width/730)*i) + space;
						janLabel.text = "Jan " + curDate.substring(2,4);
						janLabel.setStyle("bottom", 0);
						
						Areachart.parent.addChild(janLabel);
					} 
					
					else if(curDate.substring(5,10) == "04-01"){
						var aprLabel:Label = new Label();
						aprLabel.setStyle("color", 0xffffff);
						aprLabel.text = "Apr";
						aprLabel.setStyle("bottom", 0);
						aprLabel.x = ((Areachart.width/730)*i) + space;
						Areachart.parent.addChild(aprLabel);
					}
					
					else if(curDate.substring(5,10) == "07-01"){
						var julLabel:Label = new Label();
						julLabel.setStyle("color", 0xffffff);
						julLabel.text = "Jul";
						julLabel.setStyle("bottom", 0);
						julLabel.x = ((Areachart.width/730)*i) + space;
						Areachart.parent.addChild(julLabel);
					}
					
					else if(curDate.substring(5,10) == "10-01"){
						var octLabel:Label = new Label();
						octLabel.setStyle("color", 0xffffff);
						octLabel.text = "Oct";
						octLabel.setStyle("bottom", 0);
						octLabel.x = ((Areachart.width/730)*i) + space;
						Areachart.parent.addChild(octLabel);
					}					
				}
			}
			
			//right slider control mouse move event
			public function rightMove(e:MouseEvent):void
			{
				var pt:Point = new Point(this.mouseX, this.mouseY);
				//debug("" + pt.x);
				
				if((pt.x > (this.leftControlCanvas.x + this.leftControlCanvas.width)) && (pt.x <= this.Areachart.width)){
					this.rightControlCanvas.x = pt.x;
					this.rightControlCanvas.toolTip = "" + this.rightControlCanvas.x;
					this.rightCanvas.width = (this.width - this.rightControlCanvas.x - this.rightControlCanvas.width);
					this.playerButton.x = (((this.leftControlCanvas.width + this.leftControlCanvas.x) + this.rightControlCanvas.x)/2) - ((this.playerButton.width)/2);
					
					var index:int;
					var space:int = 6;
					var x:int = this.rightControlCanvas.x;
				
					index = (x/((this.Areachart.width - (space * (this.Areachart.width/730) - 1))/730)) - space;
				
					//fix strange out of bounds bug
					if(index<0)
						index = 0;
					
					globIndex = index;
					
					var tempPanel:Panel = new Panel();
					tempPanel = getParentProject.eventInfoList as Panel;
				
					tempPanel.status = "End Date: " + this.parsedResultsDjango.getItemAt(index).dateEvent;
					
					//processAtPixelMoveEnd(index);
				}
			}
			
			//left slider control mouse move event
			public function leftMove(e:MouseEvent):void
			{
				var pt:Point = new Point(this.mouseX, this.mouseY);
				//debug("" + pt.x);
				if((pt.x < (this.rightControlCanvas.x - this.leftControlCanvas.width)) && (pt.x >= (this.Areachart.x))){
					this.leftControlCanvas.x = pt.x;
					this.leftControlCanvas.toolTip = "" + this.leftControlCanvas.x;
					this.leftCanvas.width = pt.x;
					this.playerButton.x = (((this.leftControlCanvas.width + this.leftControlCanvas.x) + this.rightControlCanvas.x)/2) - ((this.playerButton.width)/2);
					
					var index:int;
					var space:int = 6;
					var x:int = this.leftControlCanvas.x + this.leftControlCanvas.width;
					
					index = (x/((this.Areachart.width - (space * (this.Areachart.width/730) - 1))/730)) - space;
				
					//fix strange out of bounds bug
					if(index<0)
						index = 0;
				
					var tempPanel:Panel = new Panel();
					tempPanel = getParentProject.eventInfoList as Panel;
				
					tempPanel.title = "Start Date: " + this.parsedResultsDjango.getItemAt(index).dateEvent;
				
					//processAtPixelMoveStart(index);
				}
			}
			
			//get date from the left controller position while scrubbing
			public function processAtPixelMoveStart(index:int):void
			{
				//updateEventList(this.parsedResultsDjango.getItemAt(index).dateEvent);
				//added for demo!
				updateEventList(getParentProject.eventInfoList.title.substring(12, getParentProject.eventInfoList.title.length), getParentProject.eventInfoList.status.substring(getParentProject.eventInfoList.status.length-10, getParentProject.eventInfoList.status.length));
			}
			
			//get date from the right controller position while scrubbing
			public function processAtPixelMoveEnd(index:int):void
			{
				//updateEventList(this.parsedResultsDjango.getItemAt(index).dateEvent);
				updateEventList(getParentProject.eventInfoList.title.substring(12, getParentProject.eventInfoList.title.length), this.parsedResultsDjango.getItemAt(index).dateEvent);
				
				//getParentProject.authorInfoList.addAuthorsToList(getParentProject.eventInfoList.title.substring(12, getParentProject.eventInfoList.title.length), getParentProject.eventInfoList.status.substring(10, getParentProject.eventInfoList.status.length));
			}
			
			//get date from the left controller position while scrubbing
			public function processAtPixelStartInit(x:int):void
			{
				var index:int;
				var space:int = 6;
				
				index = (x/((this.Areachart.width - (space * (this.Areachart.width/730) - 1))/730)) - space;
				
				//fix strange out of bounds bug
				if(index<0)
					index = 0;
				
				var tempPanel:Panel = new Panel();
				tempPanel = getParentProject.eventInfoList as Panel;
				
				tempPanel.title = "Start Date: " + this.parsedResultsDjango.getItemAt(index).dateEvent;
				//updateEventList(this.parsedResultsDjango.getItemAt(index).dateEvent);
			}
			
			//get date from the right controller position while scrubbing
			public function processAtPixelEndInit(x:int):void
			{
				var index:int;
				var space:int = 6;
				
				index = (x/((this.Areachart.width - (space * (this.Areachart.width/730) - 1))/730)) - space;
				
				//fix strange out of bounds bug
				if(index<0)
					index = 0;
				
				globIndex = index;
				
				var tempPanel:Panel = new Panel();
				tempPanel = getParentProject.eventInfoList as Panel;
				
				tempPanel.status = "End Date: " + this.parsedResultsDjango.getItemAt(index).dateEvent;
				
				updateEventList(getParentProject.eventInfoList.title.substring(12, getParentProject.eventInfoList.title.length), this.parsedResultsDjango.getItemAt(index).dateEvent);
				
				getParentProject.authorInfoList.addAuthorsToList(getParentProject.eventInfoList.title.substring(12, getParentProject.eventInfoList.title.length), getParentProject.eventInfoList.status.substring(10, getParentProject.eventInfoList.status.length));
			}
			//set current dates from the initial position of the control sliders
			private function initDates():void
			{
				processAtPixelStartInit(leftControlCanvas.x);
				processAtPixelEndInit(rightControlCanvas.x);
			}
			
			//create a new httpservice and get the information for that day
			public function updateEventList(startDate:String, endDate:String):void
			{
				getSrvEvents = new HTTPService();
				getSrvEvents.url = "http://localhost:8000/selectedeventrange/" + startDate + "/" + endDate + "/" + getParentProject.authorInfoList.highlightedAuthor + "/" + getParentProject.modulesList.highlightedModule + "/";; 
				getSrvEvents.resultFormat = "text";
				getSrvEvents.addEventListener("result", updateEventListResult);
				
				//remove event listener for timer if already started
				eventTimer.removeEventListener(TimerEvent.TIMER, eventTimerTick);
				
				if(endDate != null){
					getSrvEvents.send();
					//debugLabel.text = getSrvEvents.url;
    			}	
			}
			
			//process the result of the httpservice for a given date
			private function updateEventListResult(event:ResultEvent):void
			{				
				if(getSrvEvents.lastResult != null)
				{
					//stop playback timer
					//var getParentProject:ProjectVisualizaton = new ProjectVisualizaton();
					//getParentProject =  this.parent.parent as ProjectVisualizaton;
					getParentProject.t.stop();
					
					var decoded:Object = JSON.decode(getSrvEvents.lastResult.toString());
					var eventDictionary:Array = decoded as Array;
					
					eventDictionaryGlob = eventDictionary;
					
					//add authors for the specified date range to the author list
					//getParentProject.authorInfoList.addAuthorsToList(getParentProject.eventInfoList.title.substring(12, getParentProject.eventInfoList.title.length), getParentProject.eventInfoList.status.substring(10, getParentProject.eventInfoList.status.length));
					
					//update the progress bars
					processProgBars();
					
					eventTimer.start();
					
					eventTimer.addEventListener(TimerEvent.TIMER, eventTimerTick);		
    			}		
  			}	
    		
    		//updates the authors/modules progress bars
    		public function processProgBars():void
    		{
    			var i:int;
    			
    			//go through each author and find out how many events are associated with them
    			for(i=0;i<getParentProject.authorInfoList.authorList.length; i++)
    			{
    				var authorCount:int = 0;
    				var j:int;
    				for(j=0; j<eventDictionaryGlob.length; j++)
    				{
    					if(eventDictionaryGlob[j].author == getParentProject.authorInfoList.authorList[i].author)
    						authorCount++;
    				}
    				
    				var currentAuthorHBox:HBox = getParentProject.authorInfoList.getChildByName(getParentProject.authorInfoList.authorList[i].author) as HBox;
    				var currentAuthorProgBar:ProgressBar = currentAuthorHBox.getChildByName(getParentProject.authorInfoList.authorList[i].author + "Bar") as ProgressBar;
    				
    				currentAuthorProgBar.setProgress(authorCount, eventDictionaryGlob.length);
    				currentAuthorProgBar.toolTip = authorCount + "/" + eventDictionaryGlob.length;
    			}
    			
    			//go through each module and find out how many events are associated with them
    			for(i=0;i<getParentProject.modulesList.moduleList.length; i++)
    			{
    				var moduleCount:int = 0;
    				var l:int;
    				for(l=0; l<eventDictionaryGlob.length; l++)
    				{
    					var k:int;
    					for(k=0; k<eventDictionaryGlob[l].modules.length; k++){
    						if(eventDictionaryGlob[l].modules[k] == getParentProject.modulesList.moduleList[i].pk)
    							moduleCount++;
    					}
    				}
    				
    				var currentModuleHBox:HBox = getParentProject.modulesList.getChildByName(getParentProject.modulesList.moduleList[i].pk) as HBox;
    				var currentModuleProgBar:ProgressBar = currentModuleHBox.getChildByName(getParentProject.modulesList.moduleList[i].pk + "Bar") as ProgressBar;
    				
    				currentModuleProgBar.setProgress(moduleCount, eventDictionaryGlob.length);
    				currentModuleProgBar.toolTip = moduleCount + "/" + eventDictionaryGlob.length;
    			}
    			
    		}
    		
    		private function eventTimerTick(e:TimerEvent):void
    		{
				if(eventIndex < eventDictionaryGlob.length){
					getParentProject.eventInfoList.addEventToList(eventDictionaryGlob[eventIndex]);
					
					var tempPanel:Panel = new Panel();
					tempPanel = getParentProject.eventInfoList as Panel;
				
					tempPanel.status = eventIndex + "/" + eventDictionaryGlob.length + "                                                                                                   " + "End Date: " + this.parsedResultsDjango.getItemAt(globIndex).dateEvent;
					
					eventIndex++;
				}
				
				else{
					eventTimer.stop();
					eventTimer.removeEventListener(TimerEvent.TIMER, eventTimerTick);
					
					var tempPanel1:Panel = new Panel();
					tempPanel1 = getParentProject.eventInfoList as Panel;
				
					tempPanel1.status = eventIndex + "/" + eventDictionaryGlob.length + "                                                                                                   " + "End Date: " + this.parsedResultsDjango.getItemAt(globIndex).dateEvent;
		
					eventIndex = 0;
					//eventList.addItemAt("END", 0);
					
					//removed for demo!
					//getParentProject.t.start();
				}
			}
		]]>
	</mx:Script>
</mx:Canvas>
