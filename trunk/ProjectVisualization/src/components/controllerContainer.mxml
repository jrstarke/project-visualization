<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" height="13%" width="1000" horizontalCenter="0" creationComplete="getSrvStats.send()">

    <mx:ArrayCollection id="resultsDjango"/>
    <mx:ArrayCollection id="parsedResultsDjango"/>
    <mx:ArrayCollection id="eventList"/>
    <mx:HTTPService id="getSrvStats" url="http://localhost:8000/stats/" resultFormat="text" result="handleGetResult()"/>
    
    <mx:Script>
        <![CDATA[

        import mx.collections.ArrayCollection;
    	import com.adobe.serialization.json.JSON;
    	
    	//decode JSON format from the http request
    	private function handleGetResult():void
    	{
    		getParentProject =  this.parent.parent as ProjectVisualizaton;
    		
    		var decoded:Object = JSON.decode(getSrvStats.lastResult.toString());
    		resultsDjango = new ArrayCollection(decoded as Array);
    		
    		var i:int;
    		for(i=0; i<resultsDjango.length; i++)
    		{
    			parsedResultsDjango.addItem({dateEvent: resultsDjango[i][0], normalizedEvents: resultsDjango[i][1]});
    		}

			//perform sum of the data and store into array collection
   			//var i:int;
   			//for(i=0; i<testDjango.length; i++){
   			//	testAC.addItem({dateEvent: testDjango[i][0], commitEvent: testDjango[i][1], newEvent: testDjango[i][2], changeEvent: testDjango[i][3], totalEvents: (testDjango[i][1]+testDjango[i][2]+testDjango[i][3])});
   			//}
   			
   			initDates();
   			initMonthLabels();
   		}
        ]]>
    </mx:Script>
    
    <mx:SolidColor id="sc3" color="green" alpha=".3"/>
    <mx:Stroke id = "s3" color="green" weight="2"/>
    <mx:Glow id="playGlow" duration="2000" strength="255" color="0xFFFFFF" inner="true"/>
    <mx:Array id="bge"/>
    
	<mx:AreaChart id="Areachart" paddingLeft="10" left="0" height="90%" width="99%" top="0"
         showDataTips="true" dataProvider="{parsedResultsDjango}" backgroundElements="{bge}">
 			<mx:horizontalAxis>
           	 <mx:CategoryAxis id="ha" categoryField="dateEvent"/>
       	 </mx:horizontalAxis>

			<mx:verticalAxis>
				<mx:LinearAxis id="va"/>
			</mx:verticalAxis>
		
			<mx:horizontalAxisRenderers>
				<mx:AxisRenderer axis="{ha}" showLine="false" showLabels="false" tickLength="5" tickPlacement="none"/>
			</mx:horizontalAxisRenderers>
		
			<mx:verticalAxisRenderers>
				<mx:AxisRenderer axis="{va}" showLine="false" showLabels="false" tickLength="5" tickPlacement="none" />
			</mx:verticalAxisRenderers>
		
      	  <mx:series>
        	    <mx:AreaSeries yField="normalizedEvents" form="curve" displayName="Total Events for Date" areaStroke="{s3}" areaFill="{sc3}"/>
      	  </mx:series>
   	 </mx:AreaChart> 
	<mx:Canvas left="0" width="30%" height="90%" top="0" backgroundAlpha="0.5" backgroundColor="#5A5A5A" id="leftCanvas">
	</mx:Canvas>
	<mx:Canvas right="0" width="30%" height="90%" top="0" backgroundAlpha="0.5" backgroundColor="#5A5A5A" id="rightCanvas">
	</mx:Canvas>
	<mx:Canvas width="0.5%" height="90%" top="0" backgroundAlpha="0.8" backgroundColor="#A8FF00" id="leftControlCanvas" useHandCursor="true" buttonMode="true" showEffect="{playGlow}">
	</mx:Canvas>
	<mx:Canvas width="0.5%" height="90%" top="0" backgroundAlpha="0.8" backgroundColor="#FF5A00" id="rightControlCanvas" useHandCursor="true" buttonMode="true" showEffect="{playGlow}">
	</mx:Canvas>
	<mx:Image source="assets/images/button-icon-play.png" width="3%" height="30%" verticalCenter="0" id="playerButton" useHandCursor="true" buttonMode="true"/>
	<mx:Label x="100" bottom="30" text="" id="debugLabel"/>
	
	<mx:Script>
		<![CDATA[
			import mx.containers.Panel;
			import com.adobe.utils.DictionaryUtil;
			import mx.rpc.events.ResultEvent;
			import mx.controls.List;
			import mx.effects.easing.Linear;
			import mx.containers.HBox;
			import mx.containers.VBox;
			
			private var getSrvEvents:HTTPService;
			private var eventIndex:int = 0;
			private var eventDictionaryGlob:Array;
			
			//create new timer to step through each event for the specified date
			public var eventTimer:Timer = new Timer(500, 0);
			
			private var getParentProject:ProjectVisualizaton = new ProjectVisualizaton();
			
			//initialize month labels for the controller container
			private function initMonthLabels():void
			{
				//space: offset to match up pixels
				var space:int = 6;
				
				//loop through all dates to find which dates need labels
				var i:int;
				for(i=0; i<parsedResultsDjango.length; i++)
				{
					var curDate:String = "" + parsedResultsDjango.getItemAt(i).dateEvent;
					if(curDate.substring(5, 10) == "01-01")
					{
						var janLabel:Label = new Label();
						janLabel.x = ((Areachart.width/730)*i) + space;
						janLabel.text = "Jan " + curDate.substring(2,4);
						janLabel.setStyle("bottom", 0);
						
						Areachart.parent.addChild(janLabel);
					} 
					
					else if(curDate.substring(5,10) == "04-01"){
						var aprLabel:Label = new Label();
						aprLabel.text = "Apr";
						aprLabel.setStyle("bottom", 0);
						aprLabel.x = ((Areachart.width/730)*i) + space;
						Areachart.parent.addChild(aprLabel);
					}
					
					else if(curDate.substring(5,10) == "07-01"){
						var julLabel:Label = new Label();
						julLabel.text = "Jul";
						julLabel.setStyle("bottom", 0);
						julLabel.x = ((Areachart.width/730)*i) + space;
						Areachart.parent.addChild(julLabel);
					}
					
					else if(curDate.substring(5,10) == "10-01"){
						var octLabel:Label = new Label();
						octLabel.text = "Oct";
						octLabel.setStyle("bottom", 0);
						octLabel.x = ((Areachart.width/730)*i) + space;
						Areachart.parent.addChild(octLabel);
					}					
				}
			}
			
			//right slider control mouse move event
			public function rightMove(e:MouseEvent):void
			{
				var pt:Point = new Point(this.mouseX, this.mouseY);
				//debug("" + pt.x);
				
				if((pt.x > (this.leftControlCanvas.x + this.leftControlCanvas.width)) && (pt.x <= this.Areachart.width)){
					this.rightControlCanvas.x = pt.x;
					this.rightControlCanvas.toolTip = "" + this.rightControlCanvas.x;
					this.rightCanvas.width = (this.width - this.rightControlCanvas.x - this.rightControlCanvas.width);
					this.playerButton.x = (((this.leftControlCanvas.width + this.leftControlCanvas.x) + this.rightControlCanvas.x)/2) - ((this.playerButton.width)/2);
					
					var index:int;
					var space:int = 6;
					var x:int = this.rightControlCanvas.x;
				
					index = (x/((this.Areachart.width - (space * (this.Areachart.width/730) - 1))/730)) - space;
				
					//fix strange out of bounds bug
					if(index<0)
						index = 0;
					
					var tempVBox:VBox = new VBox();
					tempVBox = this.parent.getChildByName("mainVBox") as VBox;
					var tempHBox:HBox = new HBox();
					tempHBox = tempVBox.getChildByName("mainHBox") as HBox;
					var tempPanel:Panel = new Panel();
					tempPanel = tempHBox.getChildByName("eventInfoList") as Panel;
				
					tempPanel.status = "End Date: " + this.parsedResultsDjango.getItemAt(index).dateEvent;
					
					//processAtPixelMoveEnd(index);
				}
			}
			
			//left slider control mouse move event
			public function leftMove(e:MouseEvent):void
			{
				var pt:Point = new Point(this.mouseX, this.mouseY);
				//debug("" + pt.x);
				if((pt.x < (this.rightControlCanvas.x - this.leftControlCanvas.width)) && (pt.x >= (this.Areachart.x))){
					this.leftControlCanvas.x = pt.x;
					this.leftControlCanvas.toolTip = "" + this.leftControlCanvas.x;
					this.leftCanvas.width = pt.x;
					this.playerButton.x = (((this.leftControlCanvas.width + this.leftControlCanvas.x) + this.rightControlCanvas.x)/2) - ((this.playerButton.width)/2);
					
					var index:int;
					var space:int = 6;
					var x:int = this.leftControlCanvas.x + this.leftControlCanvas.width;
					
					index = (x/((this.Areachart.width - (space * (this.Areachart.width/730) - 1))/730)) - space;
				
					//fix strange out of bounds bug
					if(index<0)
						index = 0;
				
					var tempVBox:VBox = new VBox();
					tempVBox = this.parent.getChildByName("mainVBox") as VBox;
					var tempHBox:HBox = new HBox();
					tempHBox = tempVBox.getChildByName("mainHBox") as HBox;
					var tempPanel:Panel = new Panel();
					tempPanel = tempHBox.getChildByName("eventInfoList") as Panel;
				
					tempPanel.title = "Start Date: " + this.parsedResultsDjango.getItemAt(index).dateEvent;
				
					//processAtPixelMoveStart(index);
				}
			}
			
			//get date from the left controller position while scrubbing
			public function processAtPixelMoveStart(index:int):void
			{
				//updateEventList(this.parsedResultsDjango.getItemAt(index).dateEvent);
			}
			
			//get date from the right controller position while scrubbing
			public function processAtPixelMoveEnd(index:int):void
			{
				updateEventList(this.parsedResultsDjango.getItemAt(index).dateEvent);
				
				//getParentProject.authorInfoList.addAuthorsToList(getParentProject.eventInfoList.title.substring(12, getParentProject.eventInfoList.title.length), getParentProject.eventInfoList.status.substring(10, getParentProject.eventInfoList.status.length));
			}
			
			//get date from the left controller position while scrubbing
			public function processAtPixelStartInit(x:int):void
			{
				var index:int;
				var space:int = 6;
				
				index = (x/((this.Areachart.width - (space * (this.Areachart.width/730) - 1))/730)) - space;
				
				//fix strange out of bounds bug
				if(index<0)
					index = 0;
				
				var tempVBox:VBox = new VBox();
				tempVBox = this.parent.getChildByName("mainVBox") as VBox;
				var tempHBox:HBox = new HBox();
				tempHBox = tempVBox.getChildByName("mainHBox") as HBox;
				var tempPanel:Panel = new Panel();
				tempPanel = tempHBox.getChildByName("eventInfoList") as Panel;
				
				tempPanel.title = "Start Date: " + this.parsedResultsDjango.getItemAt(index).dateEvent;
				//updateEventList(this.parsedResultsDjango.getItemAt(index).dateEvent);
			}
			
			//get date from the right controller position while scrubbing
			public function processAtPixelEndInit(x:int):void
			{
				var index:int;
				var space:int = 6;
				
				index = (x/((this.Areachart.width - (space * (this.Areachart.width/730) - 1))/730)) - space;
				
				//fix strange out of bounds bug
				if(index<0)
					index = 0;
					
				var tempVBox:VBox = new VBox();
				tempVBox = this.parent.getChildByName("mainVBox") as VBox;
				var tempHBox:HBox = new HBox();
				tempHBox = tempVBox.getChildByName("mainHBox") as HBox;
				var tempPanel:Panel = new Panel();
				tempPanel = tempHBox.getChildByName("eventInfoList") as Panel;
				
				tempPanel.status = "End Date: " + this.parsedResultsDjango.getItemAt(index).dateEvent;
				updateEventList(this.parsedResultsDjango.getItemAt(index).dateEvent);
				
				getParentProject.authorInfoList.addAuthorsToList(getParentProject.eventInfoList.title.substring(12, getParentProject.eventInfoList.title.length), getParentProject.eventInfoList.status.substring(10, getParentProject.eventInfoList.status.length));
			}
			//set current dates from the initial position of the control sliders
			private function initDates():void
			{
				processAtPixelStartInit(leftControlCanvas.x);
				processAtPixelEndInit(rightControlCanvas.x);
			}
			
			//create a new httpservice and get the information for that day
			public function updateEventList(endDate:String):void
			{
				getSrvEvents = new HTTPService();
				getSrvEvents.url = "http://localhost:8000/events/" + endDate + "/"; 
				getSrvEvents.resultFormat = "text";
				getSrvEvents.addEventListener("result", updateEventListResult);
				
				if(endDate != null){
					getSrvEvents.send();
					debugLabel.text = getSrvEvents.url;
    			}	
			}
			
			//process the result of the httpservice for a given date
			private function updateEventListResult(event:ResultEvent):void
			{				
				if(getSrvEvents.lastResult != null)
				{
					//stop playback timer
					//var getParentProject:ProjectVisualizaton = new ProjectVisualizaton();
					//getParentProject =  this.parent.parent as ProjectVisualizaton;
					getParentProject.t.stop();
					
					var decoded:Object = JSON.decode(getSrvEvents.lastResult.toString());
					var eventDictionary:Array = decoded as Array;
					
					eventDictionaryGlob = eventDictionary;
					
					//add authors for the specified date range to the author list
					getParentProject.authorInfoList.addAuthorsToList(getParentProject.eventInfoList.title.substring(12, getParentProject.eventInfoList.title.length), getParentProject.eventInfoList.status.substring(10, getParentProject.eventInfoList.status.length));
					
					eventTimer.start();
					
					eventTimer.addEventListener(TimerEvent.TIMER, eventTimerTick);		
    			}		
    			
    			function eventTimerTick(e:TimerEvent):void
    			{
    				if(eventIndex < eventDictionaryGlob.length){
    					getParentProject.eventInfoList.addEventToList(eventDictionaryGlob[eventIndex]);
    					eventIndex++;
    				}
    				
    				else{
    					eventTimer.stop();
    					eventTimer.removeEventListener(TimerEvent.TIMER, eventTimerTick);
    					eventIndex = 0;
    					eventList.addItemAt("END", 0);
    					
						getParentProject.t.start();
    				}
    			}
			}
		]]>
	</mx:Script>
</mx:Canvas>
