<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" height="13%" width="1000" horizontalCenter="0" creationComplete="getSrv.send()">

    <mx:ArrayCollection id="resultsDjango"/>
    <mx:ArrayCollection id="parsedResultsDjango"/>
    <mx:HTTPService id="getSrv" url="http://localhost:8000/stats/" resultFormat="text" result="handleGetResult()"/>
    
    <mx:Script>
        <![CDATA[

        import mx.collections.ArrayCollection;
    	import com.adobe.serialization.json.JSON;
    	
    	//decode JSON format from the http request
    	private function handleGetResult():void
    	{
    		var decoded:Object = JSON.decode(getSrv.lastResult.toString());
    		resultsDjango = new ArrayCollection(decoded as Array);
    		
    		var i:int;
    		for(i=0; i<resultsDjango.length; i++)
    		{
    			parsedResultsDjango.addItem({dateEvent: resultsDjango[i][0], normalizedEvents: resultsDjango[i][1]});
    		}

			//perform sum of the data and store into array collection
   			//var i:int;
   			//for(i=0; i<testDjango.length; i++){
   			//	testAC.addItem({dateEvent: testDjango[i][0], commitEvent: testDjango[i][1], newEvent: testDjango[i][2], changeEvent: testDjango[i][3], totalEvents: (testDjango[i][1]+testDjango[i][2]+testDjango[i][3])});
   			//}
   			initDates();
   			initMonthLabels();
   		}

        [Bindable]
        private var expensesAC:ArrayCollection = new ArrayCollection( [
            { Month: "Jan", Profit: 2000, Expenses: 1500, Amount: 450 },
            { Month: "Feb", Profit: 1000, Expenses: 200, Amount: 600 },
            { Month: "Mar", Profit: 1500, Expenses: 500, Amount: 300 },
            { Month: "Apr", Profit: 1800, Expenses: 1200, Amount: 900 },
            { Month: "May", Profit: 2400, Expenses: 575, Amount: 500 },
            { Month: "Jun", Profit: 2000, Expenses: 1500, Amount: 450 },
            { Month: "Jul", Profit: 1000, Expenses: 200, Amount: 600 },
            { Month: "Aug", Profit: 1500, Expenses: 500, Amount: 300 },
            { Month: "Sep", Profit: 1800, Expenses: 1200, Amount: 900 },
            { Month: "Oct", Profit: 2400, Expenses: 575, Amount: 500 },
            { Month: "Nov", Profit: 1400, Expenses: 800, Amount: 700 },
            { Month: "Dec", Profit: 2000, Expenses: 1500, Amount: 450 }]);
        ]]>
    </mx:Script>
    
    <mx:SolidColor id="sc3" color="green" alpha=".3"/>
    <mx:Stroke id = "s3" color="green" weight="2"/>
    <mx:Glow id="playGlow" duration="2000" strength="255" color="0xFFFFFF" inner="true"/>
    <mx:Array id="bge"/>
    
	<mx:AreaChart id="Areachart" paddingLeft="10" left="0" height="90%" width="99%" top="0"
         showDataTips="true" dataProvider="{parsedResultsDjango}" backgroundElements="{bge}">
 			<mx:horizontalAxis>
           	 <mx:CategoryAxis id="ha" categoryField="dateEvent"/>
       	 </mx:horizontalAxis>

			<mx:verticalAxis>
				<mx:LinearAxis id="va"/>
			</mx:verticalAxis>
		
			<mx:horizontalAxisRenderers>
				<mx:AxisRenderer axis="{ha}" showLine="false" showLabels="false" tickLength="5" tickPlacement="none"/>
			</mx:horizontalAxisRenderers>
		
			<mx:verticalAxisRenderers>
				<mx:AxisRenderer axis="{va}" showLine="false" showLabels="false" tickLength="5" tickPlacement="none" />
			</mx:verticalAxisRenderers>
		
      	  <mx:series>
        	    <mx:AreaSeries yField="normalizedEvents" form="curve" displayName="Total Events for Date" areaStroke="{s3}" areaFill="{sc3}"/>
      	  </mx:series>
   	 </mx:AreaChart> 
	<mx:Canvas left="0" width="30%" height="90%" top="0" backgroundAlpha="0.5" backgroundColor="#5A5A5A" id="leftCanvas">
	</mx:Canvas>
	<mx:Canvas right="0" width="30%" height="90%" top="0" backgroundAlpha="0.5" backgroundColor="#5A5A5A" id="rightCanvas">
	</mx:Canvas>
	<mx:Canvas width="0.5%" height="90%" top="0" backgroundAlpha="0.8" backgroundColor="#A8FF00" id="leftControlCanvas" useHandCursor="true" buttonMode="true" showEffect="{playGlow}">
	</mx:Canvas>
	<mx:Canvas width="0.5%" height="90%" top="0" backgroundAlpha="0.8" backgroundColor="#FF5A00" id="rightControlCanvas" useHandCursor="true" buttonMode="true" showEffect="{playGlow}">
	</mx:Canvas>
	<mx:Image source="assets/images/button-icon-play.png" width="3%" height="30%" verticalCenter="0" id="playerButton" useHandCursor="true" buttonMode="true"/>
	<mx:Label x="100" bottom="30" text="" id="label1"/>
	
	<mx:Script>
		<![CDATA[
			import mx.containers.HBox;
			import mx.containers.VBox;
			//initialize month labels for the controller container
			private function initMonthLabels():void
			{
				//space: offset to match up pixels
				var space:int = 6;
				
				//loop through all dates to find which dates need labels
				var i:int;
				for(i=0; i<parsedResultsDjango.length; i++)
				{
					var curDate:String = "" + parsedResultsDjango.getItemAt(i).dateEvent;
					if(curDate.substring(5, 10) == "01-01")
					{
						var janLabel:Label = new Label();
						janLabel.x = ((Areachart.width/730)*i) + space;
						janLabel.text = "Jan " + curDate.substring(2,4);
						janLabel.setStyle("bottom", 0);
						
						Areachart.parent.addChild(janLabel);
					} 
					
					else if(curDate.substring(5,10) == "04-01"){
						var aprLabel:Label = new Label();
						aprLabel.text = "Apr";
						aprLabel.setStyle("bottom", 0);
						aprLabel.x = ((Areachart.width/730)*i) + space;
						Areachart.parent.addChild(aprLabel);
					}
					
					else if(curDate.substring(5,10) == "07-01"){
						var julLabel:Label = new Label();
						julLabel.text = "Jul";
						julLabel.setStyle("bottom", 0);
						julLabel.x = ((Areachart.width/730)*i) + space;
						Areachart.parent.addChild(julLabel);
					}
					
					else if(curDate.substring(5,10) == "10-01"){
						var octLabel:Label = new Label();
						octLabel.text = "Oct";
						octLabel.setStyle("bottom", 0);
						octLabel.x = ((Areachart.width/730)*i) + space;
						Areachart.parent.addChild(octLabel);
					}					
				}
			}
			
			//right slider control mouse move event
			public function rightMove(e:MouseEvent):void
			{
				var pt:Point = new Point(this.mouseX, this.mouseY);
				//debug("" + pt.x);
				
				if((pt.x > (this.leftControlCanvas.x + this.leftControlCanvas.width)) && (pt.x <= this.Areachart.width)){
					this.rightControlCanvas.x = pt.x;
					this.rightControlCanvas.toolTip = "" + this.rightControlCanvas.x;
					this.rightCanvas.width = (this.width - this.rightControlCanvas.x - this.rightControlCanvas.width);
					this.playerButton.x = (((this.leftControlCanvas.width + this.leftControlCanvas.x) + this.rightControlCanvas.x)/2);
					processAtPixelMoveEnd(this.rightControlCanvas.x);
				}
			}
			
			//left slider control mouse move event
			public function leftMove(e:MouseEvent):void
			{
				var pt:Point = new Point(this.mouseX, this.mouseY);
				//debug("" + pt.x);
				if((pt.x < (this.rightControlCanvas.x - this.leftControlCanvas.width)) && (pt.x >= (this.Areachart.x))){
					this.leftControlCanvas.x = pt.x;
					this.leftControlCanvas.toolTip = "" + this.leftControlCanvas.x;
					this.leftCanvas.width = pt.x;
					this.playerButton.x = (((this.leftControlCanvas.width + this.leftControlCanvas.x) + this.rightControlCanvas.x)/2);
					processAtPixelMoveStart(this.leftControlCanvas.x);
				}
			}
			
			public function processAtPixelMoveStart(x:int):void
			{
				var index:int;
				var space:int = 6;
				
				index = (x/((this.Areachart.width - (space * (this.Areachart.width/730) - 1))/730)) - space;
				
				var tempVBox:VBox = new VBox();
				tempVBox = this.parent.getChildByName("mainVBox") as VBox;
				var tempHBox:HBox = new HBox();
				tempHBox = tempVBox.getChildByName("mainHBox") as HBox;
				var tempCanvas:Canvas = new Canvas()
				tempCanvas = tempHBox.getChildByName("eventInfoList") as Canvas;
				var tempLabel:Label = new Label();
				tempLabel = tempCanvas.getChildByName("eventInfoLabelStart") as Label;
				
				tempLabel.text = "" + this.parsedResultsDjango.getItemAt(index).dateEvent;
			}
			
			public function processAtPixelMoveEnd(x:int):void
			{
				var index:int;
				var space:int = 6;
				
				index = (x/((this.Areachart.width - (space * (this.Areachart.width/730) - 1))/730)) - space;
				
				var tempVBox:VBox = new VBox();
				tempVBox = this.parent.getChildByName("mainVBox") as VBox;
				var tempHBox:HBox = new HBox();
				tempHBox = tempVBox.getChildByName("mainHBox") as HBox;
				var tempCanvas:Canvas = new Canvas()
				tempCanvas = tempHBox.getChildByName("eventInfoList") as Canvas;
				var tempLabel:Label = new Label();
				tempLabel = tempCanvas.getChildByName("eventInfoLabelEnd") as Label;
				
				tempLabel.text = "" + this.parsedResultsDjango.getItemAt(index).dateEvent;
			}
			
			private function initDates():void
			{
				processAtPixelMoveStart(leftControlCanvas.x);
				processAtPixelMoveEnd(rightControlCanvas.x);
			}
		]]>
	</mx:Script>
</mx:Canvas>
