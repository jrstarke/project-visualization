<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" title="Top Authors" titleStyleName="authorStatusStyle" creationComplete="initParentProject()" verticalGap="0">
	<mx:Style>
    	.authorStatusStyle {
        	fontWeight: bold;
            color: white;
     	}
     	
        .authorNameStyle	{
        	fontWeight: bold;
        }
	</mx:Style>
	
	<mx:Script>
		<![CDATA[
			import mx.rpc.http.HTTPService;
			import mx.collections.ArrayCollection;
			import mx.containers.HBox;
			import mx.controls.Label;
			import mx.rpc.events.ResultEvent;
			import com.adobe.serialization.json.JSON;
			
			private var getSrvAuthors:HTTPService;
			//create a list of the current authors in the main list
			public var authorList:Array = new Array();
			
			private var getParentProject:ProjectVisualizaton = new ProjectVisualizaton();
			
			//function to gain easy access to the parent class
			private function initParentProject():void
			{
				getParentProject =  this.parent.parent.parent.parent as ProjectVisualizaton;	
			}
			
			//add authors to author list
			public function addAuthorsToList(startDate:String, endDate:String):void
			{
				var numOfTopAuth:int = 15;

				getSrvAuthors = new HTTPService();
				getSrvAuthors.url = "http://localhost:8000/topauthors/" + startDate + "/" + endDate + "/" + numOfTopAuth + "/"; 
				getSrvAuthors.resultFormat = "text";
				getSrvAuthors.addEventListener("result", processAuthorList);
				
				if(endDate != null){
					getSrvAuthors.send();
					//debugLabel.text = getSrvEvents.url;
   				}	
			}
			
			private function processAuthorList(event:ResultEvent):void
			{
				//clear the list
				removeAuthorsFromList();
				
				var decoded:Object = JSON.decode(event.result.toString());
				var authorDictionary:Array = decoded as Array;
			
				authorList = authorDictionary;
				authorList = authorList.reverse();
					
				//authorList.addItemAt(author, 0);
				var i:int;
				for(i=0; i<authorList.length; i++){
					//check to see if the total number of events for an author is > 0
					//if((authorList[i].commitevents + authorList[i].newticketevents + authorList[i].ticketchangeevents) != 0)
					//{
						var authorHBox:HBox = new HBox();
						var authorNameLabel:Label = new Label();
			
						authorHBox.name = authorList[i].author + "";
						authorNameLabel.name = + authorList[i].author + "Label";
					
						authorNameLabel.text = "" + authorList[i].author_shortname;
						
						authorNameLabel.width = 92;
					
						authorHBox.setStyle("border", "none");
						authorNameLabel.styleName = "authorNameStyle";
						
						authorHBox.setStyle("paddingTop",1);
						authorHBox.setStyle("paddingBottom",1);
						authorHBox.setStyle("paddingLeft",1);	
					
						authorHBox.addEventListener(MouseEvent.MOUSE_OVER, eventMouseOver);
				
						authorHBox.addChild(authorNameLabel);
						this.addChildAt(authorHBox, 0);
					//}	
				}	
			}
			
			//remove author from list if there that author no longer exists in the event list
			public function removeAuthorsFromList():void
			{
				this.removeAllChildren();
			}
			
			//perform mouse over effects, pause playback
			private function eventMouseOver(e:MouseEvent):void
			{
				getParentProject.controllerCanvas.eventTimer.stop();
				
				var currentHBox:HBox = new HBox();
				currentHBox = e.currentTarget as HBox;
				
				currentHBox.addEventListener(MouseEvent.MOUSE_OUT, eventMouseOut);

				currentHBox.setStyle("borderStyle", "solid");
				
				currentHBox.setStyle("paddingTop",0);
				currentHBox.setStyle("paddingBottom",0);
				currentHBox.setStyle("paddingLeft",0);
				
				//highlight associated event if possible
				var i:int;
				for(i=0; i<getParentProject.eventInfoList.eventList.length; i++)
				{
					if(currentHBox.name == getParentProject.eventInfoList.eventList[i].author)
					{
						var eventHBox:HBox = new HBox();
						eventHBox = getParentProject.eventInfoList.getChildByName(getParentProject.eventInfoList.eventList[i].pk + "event") as HBox;
						eventHBox.setStyle("borderStyle", "solid");	
						
						eventHBox.setStyle("paddingTop",0);
						eventHBox.setStyle("paddingBottom",0);
						eventHBox.setStyle("paddingLeft",0);					
					}
				} 
			}
			
			//perform mouse out effects, resume playback
			private function eventMouseOut(e:MouseEvent):void
			{
				//check if the player is playing
				if(getParentProject.controllerCanvas.playerButton.source == "assets/images/button-icon-pause.png")
					getParentProject.controllerCanvas.eventTimer.start();
				
				var currentHBox:HBox = new HBox();
				currentHBox = e.currentTarget as HBox;
				currentHBox.setStyle("borderStyle", "none");
				
				currentHBox.setStyle("paddingTop",1);
				currentHBox.setStyle("paddingBottom",1);
				currentHBox.setStyle("paddingLeft",1);
				
				currentHBox.removeEventListener(MouseEvent.MOUSE_OUT, eventMouseOut);
				
				//unhighlight all events from the event list
				var i:int;
				for(i=0; i<getParentProject.eventInfoList.eventList.length; i++)
				{
					var eventHBox:HBox = new HBox();
					eventHBox = getParentProject.eventInfoList.getChildByName(getParentProject.eventInfoList.eventList[i].pk + "event") as HBox;
					eventHBox.setStyle("borderStyle", "none");	
					
					eventHBox.setStyle("paddingTop",1);
					eventHBox.setStyle("paddingBottom",1);
					eventHBox.setStyle("paddingLeft",1);					
				} 
			}
		]]>
	</mx:Script>
</mx:Panel>
